import tempfile
import numpy as np
from PIL import Image as PILImage
from flask import Flask, request, jsonify,render_template
from detect_malware import DetectMalware
from store_train_data_from_s3_aws import list_objects_in_folder,train_image_from_s3
app = Flask(__name__)

@app.route('/',methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/detail_detect',methods=['GET'])
def detail_detector_page():
    return render_template('detail_detect.html')
@app.route('/training_detector', methods=['POST'])
def training_detector():
    try:
        bucket = request.form.get('bucket')
        folder = request.form.get('folder')
        for obj in list_objects_in_folder(bucket,folder):
            train_image_from_s3(bucket,obj)
        status = True
        return jsonify({"status": status})
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({"error": e}), 400

@app.route('/detect_malware', methods=['POST'])
def upload_zip_file():
    file = request.files['file']
    password = request.form.get('password')
    detector = DetectMalware('')
    if file:
        with tempfile.NamedTemporaryFile(delete=False,suffix='.zip') as temp:
            file.save(temp.name)
            if not password:
                defaults_password = ['infected','malware','']
                for default_password in defaults_password:
                    default_password = default_password.encode()
                    image_file = detector.extract_zip_to_image(temp.name, default_password)
                    if image_file:
                        break
            else:
                password=password.encode()
                image_file = detector.extract_zip_to_image(temp.name, password)
            
            if image_file:
                result = detector.search_malware(image_file)
                return jsonify(result),200
            else:
                return jsonify({"error": "No image provided"}), 400
    else:
        return jsonify({"error": "No file uploaded"}), 400



if __name__ == '__main__':
    app.run(debug=True,port=3000)
