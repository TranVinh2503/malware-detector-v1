import tempfile
import os,io
import numpy as np
from PIL import Image as PILImage
from flask import Flask, request, jsonify,render_template,send_file
from detect_malware import DetectMalware
from store_train_data_from_s3_aws import list_objects_in_folder,train_image_from_s3
app = Flask(__name__)

@app.route('/',methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/detail_detect',methods=['GET'])
def detail_detector_page():
    return render_template('detail_detect.html')
@app.route('/training_detector', methods=['POST'])
def training_detector():
    try:
        bucket = request.form.get('bucket')
        folder = request.form.get('folder')
        for obj in list_objects_in_folder(bucket,folder):
            train_image_from_s3(bucket,obj)
        status = True
        return jsonify({"status": status})
    except Exception as e:
        print(f"Error: {e}")
        return jsonify({"error": e}), 400

@app.route('/detect_malware', methods=['POST'])
def upload_zip_file():
    file = request.files['file']
    password = request.form.get('password')
    detector = DetectMalware('')
    if file:
        file_extension = os.path.splitext(file.filename)[1].lower()
        if file_extension in ['.zip', '.rar']:
            if not password:
                default_passwords = ['infected', 'malware', '']
                for default_password in default_passwords:
                    default_password = default_password.encode()
                    image_file = detector.extract_zip_to_image(file, default_password)
                    if image_file:
                        break
            else:
                password = password.encode()
                image_file = detector.extract_zip_to_image(file, password)
            
            if image_file:
                result = detector.search_malware(image_file)
                return jsonify(result), 200
            else:
                return jsonify({"error": "Unable to extract the file, please make sure it contains a Portable Executable File"}), 400
        elif file_extension in ['.exe', '.dll', '.bat', '.cmd', '.com', '.cpl', '.scr', '.msi','.sys','.drv','.ocx']:
            binary_content = file.read()
            image_file = detector.convert_to_image(binary_content)
            if image_file:
                result = detector.search_malware(image_file)
                return jsonify(result), 200
            else:
                return jsonify({"error": "Unable to detect file"}), 400
        else:
            return jsonify({'error': 'Unsupported file type'}),400
    else:
        return jsonify({"error": "No file uploaded"}), 400
    
@app.route('/convert_to_image', methods=['POST'])
def get_image():
    file = request.files['file']
    password = request.form.get('password')
    detector = DetectMalware('')
    if file:
        file_extension = os.path.splitext(file.filename)[1].lower()
        if file_extension in ['.zip', '.rar']:
            if not password:
                default_passwords = ['infected', 'malware', '']
                for default_password in default_passwords:
                    default_password = default_password.encode()
                    image_file = detector.extract_zip_to_image(file, default_password)
                    if image_file:
                        break
            else:
                password = password.encode()
                image_file = detector.extract_zip_to_image(file, password)
            if image_file:
                img_io = io.BytesIO()
                image_file.save(img_io,'PNG')
                img_io.seek(0)
                return send_file(img_io,mimetype="image/png"),200
            else:
                return jsonify({"error": "Unable to extract the file, please make sure it contains a Portable Executable File"}), 400
        elif file_extension in ['.exe', '.dll', '.bat', '.cmd', '.com', '.cpl', '.scr', '.msi','.sys','.drv','.ocx']:
            binary_content = file.read()
            image_file = detector.convert_to_image(binary_content)
            if image_file:
                img_io = io.BytesIO()
                image_file.save(img_io,'PNG')
                img_io.seek(0)
                return send_file(img_io,mimetype="image/png")
            else:
                return jsonify({"error": "Unable to detect file"}), 400
        else:
            return jsonify({'error': 'Unsupported file type'}),400
    else:
        return jsonify({"error": "No file uploaded"}), 400
@app.route('/image_detect', methods=['POST'])
def image_detect():
    file = request.files['file']
    detector = DetectMalware('')
    if file:
        file_extension = os.path.splitext(file.filename)[1].lower()
        if file_extension in ['.png', '.jpg', '.jpeg', '.bmp', '.gif']:
            try:
                image = PILImage.open(file)
                # If the image needs to be resized or processed, do it here
                result = detector.search_malware(image)
                return jsonify(result), 200
            except Exception as e:
                return jsonify({"error": f"Unable to process image: {str(e)}"}), 400
        else:
            return jsonify({'error': 'Unsupported file type'}),400
    else:
        return jsonify({"error": "No file uploaded"}), 400
    
# from waitress import serve
# if __name__ == "__main__":
#     serve(app, host="0.0.0.0", port=3000)
if __name__ == "__main__":
    app.run(port=3000,debug=True)
