import os
import math
import pyzipper
import tempfile
import numpy as np
from PIL import Image as PILImage
from flask import Flask, request, jsonify
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import Model

from pinecone import Pinecone, ServerlessSpec
from StoreVectors import StoreVectors
from detect_malware import DetectMalware
app = Flask(__name__)

@app.route('/training_detector', methods=['POST'])
def training_detector():
    data_folder = request.form.get('data_folder')
    app_root = os.path.dirname(os.path.abspath(__file__))

    combined_data_folder = os.path.join(app_root, data_folder)
    index = 'vectors'
    api_key = '13fadf20-cd84-43e0-bda3-609c6eca3183'
    indexer = StoreVectors(combined_data_folder,index,api_key)
    indexer.update_train()

@app.route('/detect_malware', methods=['POST'])
def upload_zip_file():
    file = request.files['file']
    password = request.form.get('password')
    detector = DetectMalware('')
    if file:
        with tempfile.NamedTemporaryFile(delete=False,suffix='.zip') as temp:
            file.save(temp.name)
            if not password:
                defaults_password = ['infected','malware','']
                for default_password in defaults_password:
                    default_password = default_password.encode()
                    image_file = detector.extract_zip_to_image(temp.name, default_password)
            else:
                print(password)
                password=password.encode()
                image_file = detector.extract_zip_to_image(temp.name, password)
            
            if image_file:
                result = detector.search_malware(image_file)
                return jsonify(result),200
            else:
                return jsonify({"error": "No image provided"}), 400
    else:
        return jsonify({"error": "No file uploaded"}), 400



if __name__ == '__main__':
    app.run(debug=True,port=3000)
