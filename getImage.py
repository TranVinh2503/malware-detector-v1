import os
import boto3
from botocore.exceptions import NoCredentialsError, ClientError
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()
def list_image_links_in_folder(bucket, folder, max_links=1000):
    try:
        # Ensure AWS credentials are set in environment variables
        aws_access_key_id = os.environ.get('AWS_ACCESS_KEY_ID')
        aws_secret_access_key = os.environ.get('AWS_SECRET_ACCESS_KEY')
        region = os.environ.get('AWS_DEFAULT_REGION')  # default to 'us-west-1' if not set

        if not aws_access_key_id or not aws_secret_access_key:
            raise ValueError("AWS credentials not found in environment variables")

        s3 = boto3.client('s3',
                          aws_access_key_id=aws_access_key_id,
                          aws_secret_access_key=aws_secret_access_key,
                          region_name=region)
        paginator = s3.get_paginator('list_objects_v2')
        page_iterator = paginator.paginate(Bucket=bucket, Prefix=folder)

        image_links = []
        for page in page_iterator:
            if 'Contents' in page:
                for obj in page['Contents']:
                    key = obj['Key']
                    if any(key.lower().endswith(ext) for ext in ['.jpg', '.jpeg', '.png', '.gif']):
                        image_link = f"https://{bucket}.s3.{region}.amazonaws.com/{key}"
                        image_links.append(image_link)
                        if len(image_links) >= max_links:
                            return image_links
        return image_links
    except ValueError as e:
        print(e)
        return []
    except NoCredentialsError:
        print("AWS credentials not found.")
        return []
    except ClientError as e:
        print(f"An error occurred: {e}")
        return []
def save_links_to_file(links, file_path):
    try:
        with open(file_path, 'w') as file:
            for link in links:
                file.write(f"{link}\n")
    except Exception as e:
        print(f"Error saving to file: {e}")

# Example usage
bucket_name = 'malware-detector'
folder_name = 'non-malware'
output_file = 'image_links.txt'


image_links = list_image_links_in_folder(bucket_name, folder_name)

# Save the links to a file
save_links_to_file(image_links, output_file)

print(f"Saved {len(image_links)} image links to {output_file}")
