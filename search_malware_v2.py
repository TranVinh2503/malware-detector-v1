import os
import math
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import  Model
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
from pinecone import Pinecone, ServerlessSpec
from StoreVectors import StoreVectors

if __name__ == "__main__":
    data_folder = ""
    # Search for nearest vectors
    pc = Pinecone(api_key='13fadf20-cd84-43e0-bda3-609c6eca3183')

    # Check if the index exists
    index_name = 'vectors-ransomwares-index'
    if index_name not in pc.list_indexes().names():
        print(f'Index {index_name} is not exists')

    api_key = '13fadf20-cd84-43e0-bda3-609c6eca3183'
    
    indexer = StoreVectors(data_folder, index_name, api_key)
    
    search_image = "data_test/5d09b001c18384a9d5e8b31b9c4ee5ed77082e0a9b8783c34b3916b1534d2c21.png"
    model = indexer.get_extract_model()
    search_vector = indexer.extract_vector(model,search_image)
    
    # Check if the index exists
    index_name = 'vectors-ransomwares-index'
    if index_name not in pc.list_indexes().names():
        print(f'Index {index_name} is not exists')

    # Query Pinecone for nearest vectors
    K = 16
    index = pc.Index(index_name)
    # Perform similarity search
    results = index.query(namespace = "ns2",vector=search_vector.tolist(), top_k=K,include_values= True)

    # Extract the matches
    matches = results['matches']  # Assuming the matches are in the first list

    # Extract the nearest image paths and distances
    nearest_image_paths = [match['id'] for match in matches]
    nearest_distances = [match['score'] for match in matches]

    # Display the nearest images
    # First Figure
    axes1 = []
    grid_size1 = int(math.sqrt(K))  # Calculate grid size based on the number of images
    fig1 = plt.figure(figsize=(10, 10))
    fig1.canvas.setWindowTitle('Ransomwares')
    for idx, (image_path, distance) in enumerate(zip(nearest_image_paths, nearest_distances)):
            axes1.append(fig1.add_subplot(grid_size1, grid_size1, idx + 1))
            title = f"\n Dis: {distance:.4f}"  # Extract image name and add distance
            axes1[-1].set_title(title)
            plt.imshow(Image.open(image_path))

    fig1.tight_layout()


    #Check if the index exists
    index_name_nonmalwares = 'vectors-nonmalwares-index'
    if index_name_nonmalwares not in pc.list_indexes().names():
        print(f'Index {index_name_nonmalwares} is not exists')


    # Query Pinecone for nearest vectors
    index_nonmalwares = pc.Index(index_name_nonmalwares)
    # Perform similarity search
    results_nonmalwares = index_nonmalwares.query(namespace = "ns2",vector=search_vector.tolist(), top_k=K,include_values= True)

    # Extract the matches
    matches_nonmalwares = results_nonmalwares['matches']  # Assuming the matches are in the first list

    # Extract the nearest image paths and distances
    nearest_image_paths_nonmalwares = [match['id'] for match in matches_nonmalwares]
    nearest_distances_nonmalwares = [match['score'] for match in matches_nonmalwares]

    # Second Figure
    axes2 = []
    grid_size2 = int(math.sqrt(K)) 
    fig2 = plt.figure(figsize=(10, 10))
    # fig2.setWindowTitle('Non-Malwares')
    for idx, (image_path, distance) in enumerate(zip(nearest_image_paths_nonmalwares, nearest_distances_nonmalwares)):
            axes2.append(fig2.add_subplot(grid_size2, grid_size2, idx + 1))
            title = f"\n Dis: {distance:.4f}"  # Extract image name and add distance
            axes2[-1].set_title(title)
            plt.imshow(Image.open(image_path))

    fig2.tight_layout()
    # Show both figures
    plt.show()
