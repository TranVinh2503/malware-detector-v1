import os,time
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.models import Model
from PIL import Image
import numpy as np
from pinecone import Pinecone, ServerlessSpec


class StoreVectors:
    def __init__(self,data_folder, index_name, api_key):
        self.data_folder = data_folder
        self.index_name = index_name
        self.pc = Pinecone(api_key=api_key)
        self.vectors = []
        self.paths = []
    # def __init__(self,api_key):
    #     self.pc = Pinecone(api_key=api_key)
    #     self.vectors = []
    #     self.paths = []
    
    def get_extract_model(self):
        vgg16_model = VGG16(weights = "imagenet")
        extract_model = Model(inputs = vgg16_model.inputs,outputs = vgg16_model.get_layer("fc1").output)
        return extract_model
    
    def image_preprocess(self, img):
        img = img.resize((224, 224))
        img = img.convert("RGB")
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)
        return x
    
    def extract_vector(self,model, image_path):
        print("Handle: ", image_path)
        img = Image.open(image_path)
        img_tensor = self.image_preprocess(img)
        
        vector = model.predict(img_tensor)[0]
        vector = vector / np.linalg.norm(vector)
        
        return vector
    
    def extract_vector_v2(self,model, img):
        img_tensor = self.image_preprocess(img)
        
        vector = model.predict(img_tensor)[0]
        vector = vector / np.linalg.norm(vector)
        
        return vector
    
    def store_image(self,img, path):
        model = self.get_extract_model()
        image_vector = self.extract_vector_v2(model,img)
        folder_name = path.split('/')
        path_full = f'dataset/{path}'
        if folder_name[0].lower() == 'non-malware':
            index = self.pc.Index('vectors-nonmalwares-index-full')
            try:
                index.upsert(vectors=[
                        {
                            "id": path_full,
                            "values": image_vector,
                            "metadata": {
                                "path": "vector"
                            }
                        },
                    ],
                    namespace="example-namespace"
                )
                print("Upsert successful")
            except Exception as e:
                print(f"Error upserting vectors into index '{index}': {e}")
            
        elif folder_name[0].lower() == 'ransomwares':
            index = self.pc.Index('vectors-ransomwares-index-full')
            try:
                index.upsert(vectors=[
                        {
                            "id": path_full,
                            "values": image_vector,
                            "metadata": {
                                "path": "vector"
                            }
                        },
                    ],
                    namespace="example-namespace"
                )
                print("Upsert successful")
            except Exception as e:
                print(f"Error upserting vectors into index '{index}': {e}")
    
    def store_images(self, batch_size=100):
        model = self.get_extract_model()
        for image_path in os.listdir(self.data_folder):
            image_path_full = os.path.join(self.data_folder, image_path)
            image_vector = self.extract_vector(model,image_path_full)
            self.vectors.append(image_vector)
            self.paths.append(image_path_full)
        
        if self.index_name in self.pc.list_indexes():
            try:
                self.pc.delete_index(self.index_name)
                time.sleep(10)
            except Exception as e:
                print(f"Error deleting index '{self.index_name}': {e}")
        
        self.pc.create_index(
            name=self.index_name,
            dimension=4096,
            metric="cosine",
            spec=ServerlessSpec(
                cloud='aws',
                region='us-east-1'
            )
        )
        
        image_vector_dicts = [{"id": path, "values": vec.tolist()} for path, vec in zip(self.paths, self.vectors)]
        batches = [image_vector_dicts[i:i + batch_size] for i in range(0, len(image_vector_dicts), batch_size)]
        
        index = self.pc.Index(self.index_name)
        try:
            for batch in batches:
                index.upsert(vectors=batch, namespace="ns2")
            print("index upsert successful")
        except Exception as e:
            print(f"Error upserting vectors into index '{self.index_name}': {e}")

    def transfer_train_folder(self, batch_size=100):
        model = self.get_extract_model()
        for image_path in os.listdir(self.data_folder):
            image_path_full = os.path.join(self.data_folder, image_path)
            image_vector = self.extract_vector(model, image_path_full)
            self.vectors.append(image_vector)
            self.paths.append(image_path_full)

        image_vector_dicts = [{"id": path, "values": vec.tolist()} for path, vec in zip(self.paths, self.vectors)]
        batches = [image_vector_dicts[i:i + batch_size] for i in range(0, len(image_vector_dicts), batch_size)]
        
        index = self.pc.Index(self.index_name)
        try:
            for batch in batches:
                index.upsert(vectors=batch, namespace="ns2")
            print("index upsert successful")
        except Exception as e:
            print(f"Error upserting vectors into index '{self.index_name}': {e}")

    def train_image(self,image_path,batch_size=100):
        model = self.get_extract_model()
        image_vector = self.extract_vector(model, image_path)
        index = self.pc.Index(self.index_name)
        try:
            index.upsert(vectors=[{"id": image_path, "values": image_vector.tolist()}], namespace="ns2")
            print("index upsert successful")
        except Exception as e:
            print(f"Error upserting vectors into index '{self.index_name}': {e}")
