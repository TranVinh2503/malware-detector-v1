from flask import Flask, render_template, request, jsonify
import os
import numpy as np
from PIL import Image
import pyzipper
import tempfile

app = Flask(__name__)

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

def convert_to_binary(input_file):
    try:
        # Check if the file exists and is accessible
        if not os.path.isfile(input_file):
            raise FileNotFoundError(f"The file '{input_file}' does not exist or is inaccessible.")

        # Open the file in binary read mode
        with open(input_file, 'rb') as file:
            # Read the entire content of the file
            file_content = file.read()
        # Get the file name (without extension) from the input file path
        file_name = os.path.basename(input_file)
        file_name_without_ext, _ = os.path.splitext(file_name)

        # Construct the output binary file path by appending '.bin' to the file name
        output_binary_file = file_name_without_ext + '.bin'

        # Write the content of the file into the binary file
        with open(output_binary_file, 'wb') as binary_file:
            binary_file.write(file_content)
            return output_binary_file
        
    except FileNotFoundError as e:
        print("FileNotFoundError:", str(e))
    except Exception as e:
        print("An error occurred:", str(e))

def determine_width(pixel_file_size):
    # Define width based on the pixel file size
    if pixel_file_size <= 10:
        return 32
    elif 10 < pixel_file_size <= 30:
        return 64
    elif 30 < pixel_file_size <= 60:
        return 128
    elif 60 < pixel_file_size <= 100:
        return 256
    elif 100 < pixel_file_size <= 200:
        return 384
    elif 200 < pixel_file_size <= 1000:
        return 512
    elif 1000 < pixel_file_size <= 1500:
        return 1024
    else:
        return 2048
def convert_to_image(binary_content):
    try:
        # Convert bytes to pixel intensity values between 0 and 255
        pixel_stream = np.frombuffer(binary_content, dtype=np.uint8)

        target_width = determine_width(len(pixel_stream))

        # Calculate target height based on the target width and pixel_stream
        target_height = int(np.ceil(len(pixel_stream) / target_width))

        # Reshape pixel stream into 2D array
        reshaped_image = np.resize(pixel_stream, (target_height, target_width))

        # Convert 2D array to image
        img = Image.fromarray(reshaped_image)

        # Resize image if needed
        img_resized = img.resize((224, 244), Image.BILINEAR)

        return img_resized
    except Exception as e:
        print("An error occurred:", str(e))

@app.route('/unzip', methods=['POST'])
def unzip():
    if request.method == 'POST':
        # Get file and password from form
        uploaded_file = request.files['file']
        password = request.form['password']
        image_output_dir = "dataset"
        images = []

        with tempfile.TemporaryDirectory(prefix="temp_", dir=".") as temp_dir:
            # Save uploaded file to temporary directory
            uploaded_file_path = os.path.join(temp_dir, uploaded_file.filename)
            uploaded_file.save(uploaded_file_path)

            # Extract zip file to temporary directory
            with pyzipper.AESZipFile(uploaded_file_path, 'r') as zip_ref:
                zip_ref.extractall(temp_dir, pwd=password.encode())

            # Convert extracted files to binary and then to images
            for extracted_file in os.listdir(temp_dir):
                extracted_file_path = os.path.join(temp_dir, extracted_file)
                if os.path.isfile(extracted_file_path):
                    # Convert extracted file to binary
                    # Read binary content
                        with open(extracted_file_path, 'rb') as f:
                                binary_content = f.read()
                        
                        # Convert binary content to image
                        img = convert_to_image(binary_content)
                        
                        # Store the image along with its file name
                        images.append((extracted_file, img))

        # Save images to disk
        for file_name, img in images:
            image_path = os.path.join(image_output_dir, os.path.splitext(file_name)[0] + '.png')
            img.save(image_path)

        return jsonify({'message': 'Files extracted and converted successfully! Images saved to disk in "dataset" directory.'})

if __name__ == '__main__':
    app.run(debug=True)
